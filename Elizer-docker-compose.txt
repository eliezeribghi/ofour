

services:
  
  frontend:
   platform: linux/amd64
   build:
    context: .
    dockerfile: ./frontend/Dockerfile
   ports:
    - "5173:80"  # Ajuste selon ton projet (3000 si besoin)
   volumes:
    - ./frontend:/app  # Recharge le code sans rebuild
   depends_on:
    - backend
   networks:
    - app_network
   restart: unless-stopped
  nginx:
    image: nginx:alpine
    container_name: nginx
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro  # Monte le fichier de config Nginx
      - ./nginx/ssl:/etc/nginx/ssl:ro                # Monte les certificats SSL
      - ./frontend/dist:/app/dist                 # Monte les fichiers du frontend
    ports:
      - "80:80"                                   # Expose le port HTTP
      - "443:443"                                 # Expose le port HTTPS
    depends_on:
      - backend                                   # Assure-toi que le backend démarre avant Nginx
      - frontend                                  # Assure-toi que le frontend démarre avant Nginx
    networks:
      - app_network


  backend:
    platform: linux/amd64
    build:
      context: ./backend
      dockerfile: ./Dockerfile
    volumes:
      - ./backend:/var/www
    ports:
      - "8080:8080"

    depends_on:
      - mysql
    networks:
      - app_network
    environment:
      DB_CONNECTION: mysql
      DB_HOST: 127.0.0.1
      DB_PORT: 3306
      DB_DATABASE: ofour
      DB_USERNAME: root
      DB_PASSWORD: root
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 3


  mysql:
    platform: linux/amd64
    image: mysql:5.7
    container_name: my-mysql
    restart: always
    tty: true
    environment:
     MYSQL_ROOT_PASSWORD: root
     MYSQL_DATABASE: ofour
    ports:
    - "3307:3306"
    volumes:
    - mysql_data:/var/lib/mysql
    - ./bdd/init.sql:/docker-entrypoint-initdb.d/init.sql
    networks:
    - app_network
    command: --lower_case_table_names=2
    healthcheck:
     test: ["CMD", "mysqladmin", "ping", "-h", "192.168.1.247", "-uroot", "-proot"]
     interval: 10s
     timeout: 5s
     retries: 5

 

networks:
  app_network:
    driver: bridge

volumes:
  mysql_data:
